<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd"
       default-lazy-init="true">
    <description>Spring Common Config File</description>

    <context:annotation-config/>
    <!-- 启动包扫描功能，以便注册带有@controller,@service,@repository,@component等注解的类为spring的bean
    <context:component-scan base-package="com.miaozhen.diablo.framework">
        <context:exclude-filter expression="org.springframework.stereotype.Service" type="annotation"/>
        <context:exclude-filter expression="org.springframework.stereotype.Repository" type="annotation"/>
        <context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
    </context:component-scan>
    -->

    <context:component-scan base-package="com.happydriving.rockets"/>

    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <!-- 使用annotation 自动注册bean(需要用到的包),并保证@Required,@Autowired的属性被注入 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <!-- 标准配置 -->
                <value>/WEB-INF/config/jdbc.properties</value>
            </list>
        </property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 持久化用到springJDBC，涉及到文章类型字段的操作-->
    <bean id="nativeJdbcExtractor"
          class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor"
          lazy-init="true"/>

    <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"
          lazy-init="true">
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>



    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="merge*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="count*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="list*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- 只对业务逻辑层实施事务 -->
    <aop:config expose-proxy="true">
        <aop:pointcut id="txPointcut" expression="(execution(* com.happydriving.rockets.*.*.service..*.*(..)))
            or (execution(* com.happydriving.rockets.*.service..*.*(..)))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <!-- 使用annotation定义事务 -->
    <!-- 	<tx:annotation-driven transaction-manager="transactionManager" /> -->

    <!-- JDBC DataSource  -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 连接池的最大数据库连接数，设为0 表示无限制 -->
        <property name="maxActive" value="40"/>
        <!--数据库连接的最大空闲时间。超过此空闲时间，数据库连接将被标记为不可用，然后被释放。设为0 表示无限制  -->
        <property name="maxIdle" value="20"/>
        <!--最大建立连接等待时间。如果超过此时间将接到异常。设为－1 表示无限制 -->
        <property name="maxWait" value="1000"/>
        <property name="defaultAutoCommit" value="false"/>
        <!--回收被遗弃的（一般是忘了释放的）数据库连接到连接池中。 -->
        <property name="removeAbandoned" value="true"/>
        <!--# 数据库连接过多长时间不用将被视为被遗弃而收回连接池中。 -->
        <property name="removeAbandonedTimeout" value="120"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.happydriving.rockets.**.entity"/>
        <property name="configLocation" value="/WEB-INF/config/mybatis-config.xml"/>
        <property name="mapperLocations" value="/WEB-INF/config/mapper/*.xml"/>
        <!-- We can use this kind of properties config method...
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                            resonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
        -->
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.happydriving.rockets.**.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <task:annotation-driven />

    <!-- Thread pool configuration -->
    <bean id="requestExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5"/>
        <property name="maxPoolSize" value="10"/>
        <!-- cache queue size -->
        <property name="queueCapacity" value="200"/>
        <!-- thread allowed max idle time(ms) -->
        <property name="keepAliveSeconds" value="30000"/>
    </bean>

    <bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <!--<property name="host" value="smtp.exmail.qq.com"/>-->
        <property name="host" value="smtp.mxhichina.com"/>
        <property name="username" value="inform@ejiapei.com"/>
        <property name="password" value="info123456@"/>
        <!--<property name="username" value="mazhiqiang@ejiapei.com"/>-->
        <!--<property name="password" value="mmaa7669660"/>-->
       <!-- <property name="username" value="gaochao@ejiapei.com"/>
        <property name="password" value="@runharry31415"/>-->
        <property name="protocol" value="smtps"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.timeout">10000</prop>
            </props>
        </property>
    </bean>

    <bean id="freemarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="WEB-INF/mailtemplate"/>
        <property name="freemarkerSettings">
            <props>
                <prop key="default_encoding">UTF-8</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="template_update_delay">1800</prop>
            </props>
        </property>
    </bean>


    <bean id="drivingConfigProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>/WEB-INF/config/driving-config.properties</value>
            </list>
        </property>
    </bean>

    <!-- 设置发送潜在登记学员的自动任务 -->
    <bean id="potentialStudentSendTask" class="com.happydriving.rockets.server.component.crontask.PotentialStudentSendTask"/>

    <bean id="halfHourSendJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="potentialStudentSendTask"/>
        <property name="targetMethod" value="executeSendHalfHour"/>
    </bean>

    <bean id="halfHourStudentJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="halfHourSendJob"/>
        <!-- 每小时的0分钟开始执行 -->
        <property name="cronExpression" value="0 0 * * * ?"/>
    </bean>

    <bean id="perDaySendJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="potentialStudentSendTask"/>
        <property name="targetMethod" value="executeSendPerDayData"/>
    </bean>

    <bean id="perDayStudentJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="perDaySendJob"/>
        <!-- 每天的0点1分0秒开始执行 -->
        <property name="cronExpression" value="0 1 0 * * ?"/>
    </bean>

    <!-- 定时发送全天crm数据的定时报表 -->
    <bean id="dailyReportSendTask" class="com.happydriving.rockets.server.component.crontask.DailyReportSendTask"/>
    <bean id="dailyReportSendJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="dailyReportSendTask"/>
        <property name="targetMethod" value="sendDailyReportToday"/>
    </bean>
    <bean id="at2100Trigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="dailyReportSendJob"/>
        <property name="cronExpression" value="0 0 21 * * ?"/>
    </bean>
    <bean id="at2355Trigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="dailyReportSendJob"/>
        <property name="cronExpression" value="0 55 23 * * ?"/>
    </bean>

    <!--自动给教练安排日程-->
    <bean id="autoCaochSchedule" class="com.happydriving.rockets.server.component.crontask.AutoCoachSchedule"/>
    <bean id="dailyAutoCoachSchedule" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="autoCoachSchedule"/>
        <property name="targetMethod" value="arrangeCoachSchedule"/>
    </bean>
    <bean id="dailyCoachScheduleTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="dailyAutoCoachSchedule"/>
        <!-- 每天8点开始执行 -->
        <property name="cronExpression" value="0 0 8 * * ?"/>
    </bean>

    <!--定时发送今天的教练预约列表-->
    <bean id="dailyTrainingTaskSend" class="com.happydriving.rockets.server.component.crontask.DailyTrainingTaskSend"/>
    <bean id="dailyTrainingTaskSendjob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="dailyTrainingTaskSend"/>
        <property name="targetMethod" value="sendTomorrowTrainingTask"/>
    </bean>
    <bean id="sendTomorrowTrainingTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="dailyTrainingTaskSendjob"/>
        <property name="cronExpression" value="0 0 1 * * ?"/>
    </bean>



    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
               <!-- <ref bean="halfHourStudentJobTrigger"/>-->
                <ref bean="perDayStudentJobTrigger"/>
              <!--  <ref bean="dailyCoachScheduleTrigger"/>-->
                <ref bean="at2100Trigger"/>
                <ref bean="at2355Trigger"/>
                <ref bean="sendTomorrowTrainingTaskTrigger"/>
            </list>
        </property>
        <property name="taskExecutor" ref="requestExecutor"/>
    </bean>

</beans>
